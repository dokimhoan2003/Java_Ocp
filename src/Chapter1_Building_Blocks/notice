1-2-3-4. Mở đầu
- Trong java có 3 cách comment
- Class top-level luôn luôn đc đánh dấu là public
- Chỉ có một class có thể đc đánh dấu là public trong một tệp.
Nghĩa là một tệp chỉ đc có một class là public và tên class trùng với tên file
- public static void main(String[] agrs) {}, sau đây là các biến thể của main method
+ bạn có thể thay đổi tên tham số args thành tên khác
+ hay hoặc String agrs[]
+ String... args
+ thêm final VD: public final static void main(String[] agrs) {}
+ thêm final vào tham số VD: public static void main(final String[] agrs) {}
+ có thể viết như này: static public void main(String[] agrs) {}

5. Package
- Có 3 trường hợp để import
import java.util.Random; // import a specific class
import java.util.*; // import all classes in the package
import java.util.Random random = new java.util.Random(); // import a specific class and use it with its fully qualified name
- Trường hợp đặc biệt
import java.util.Date; //  Vì import cụ thể nên chương trình sẽ lấy Date trong java.util.Date thay vì java.sql.Date
import java.sql.*;

6. Compile, Run and Archive Java Files
// Biên dịch và chạy chương trình thông thường
- Lệnh compile không phân biệt hệ điều hành
+ cd đến sub package
+ javac ocppackage/Ocp.java ocapackage/Oca.java
=> Output: .class files
- Biên dịch tất cả các file trong package
+ javac ocppackage/*.java
- Sau khi biên dịch thành công thì trong package có 2 file là .java và .class
- Để chạy chương trình thì cần phải cd đến package chứa file .class
+ java ocppackage.Ocp

// Biên dịch và chạy trương trình kiểu khác
- Khi biên dịch muốn file .class sau khi biên nằm trong folder /classes khác với .java file
và ,mỗi package sẽ có một thư mục con riêng chứa file .class thì chạy lệnh sau:
+ javac -d ocppackage/Ocp.java ocapackage/Oca.java
- Sau khi biên dịch theo cách trên thì sẽ có cấu trúc như sau:
/ classes
  / ocppackage
      Ocp.class
  / ocapackage
      Oca.class
- Để chạy chương trình theo cách trên có 3 cách
+ java -cp classes ocppackage.Ocp
+ java -classpath classes ocppackage.Ocp
+ java --class-path classes ocppackage.Ocp
* Lưu ý: -cp cũng có sẵn trên lệnh javac -cp để compiler khi cần thiết

// Để chạy ứng dụng có một số file trên package khác VD("deps" package)
và một số trong file .jar(VD: myJar.jar) thì chạy lệnh sau:
java -cp ".;C:\com\udemy\deps;C:\com\udemy\myJar.jar" myPackage.MyApp (Window)
java -cp ".:/com/udemy/deps:/com/udemy/myJar.jar" myPackage.MyApp (Unix OS)
+ Dấu . nghĩa là bao gồm cả thư mục hiện tại


// Trong trường hợp có nhiều file .jar trong cùng thư mục thì có thể dùng lệnh sau:
java -cp ".;C:\com\udemy\myjars\*" myPackage.MyApp (Window)
java -cp ".:C:/com/udemy/myjars/*" myPackage.MyApp (Unix OS)
+ Dấu * không bao gồm các thư mục con, chỉ bao gồm các file .jar trong thư mục hiện tại

// Tạo một file jar(froms file in current folder)
jar -cvf myNewJarFile.jar .
jar --create --verbose --file myNewJarFile.jar .

// Tạo một file jar(from file in custom folder)
jar -cvf myNewJarFile.jar -C myFolder
jar --create --verbose --file myNewJarFile.jar -C myFolder

7. Objects
- Khi khởi tạo một đối tượng thì initializer block sẽ được chạy trước constructor
- Thứ tự chạy của các khối lệnh trong class khi tạo một đối tượng là:
  + Khởi tạo các variable instance
  + Thực thi khối khởi tạo(initializer block)
  + Thực thi constructor

8. Data Types
- Primitive data types
To keep in mind:
+ trong java boolean true hay false không liên quan đến 1 hay 0
+ Tất cả các loại số đều cho phép số âm, số dương và số 0
+ float yêu cầu đặt f hay F ở cuối số, nếu không sẽ bị lỗi biên dịch( VD: float x = 2.7; // DOES NOT COMPILE AND DEFAULTS TO DOUBLE)
+ long yêu cầu đặt l hay L ở cuối số, nếu không sẽ bị lỗi biên dịch( VD: long x = 233333333333333; // DOES NOT COMPILE AND DEFAULTS TO INT)
+ bit size của boolean không được xác định(phụ thuộc vào JVM)
Hỗ trợ định dạng số digital
+ Base 10: digits 0-9, số bình thường
+ Octal: digits 0-7, sử dụng 0 ở đầu số, VD: 0123
+ Hexadecimal: digits 0-9 và a-f/A-F, sử dụng 0x hoặc 0X ở đầu số, VD: 0x123, OxFF, OXFF
+ Binary: digits 0-1, sử dụng 0b hoặc 0B ở đầu số, VD: 0b101010, 0B101010
+ Underscore: có thể sử dụng dấu gạch dưới để phân tách các chữ số trong số,
VD: 1_000_000, 0xFF_FF_FF_FF, 0b1010_1010 còn _10.1, 10.1_, 10_.1, 10._1 sẽ không hợp lệ
//Có một số wrapper class cho các primitive data types:
Boolean, Byte, Short, Integer, Long, Float, Double, Character và ta sử dụng method static valueOf()
Khác nhau giữa sử dụng Integer.valueOf() và Integer.parseInt() là một cái tạo wrapper class một cái tạo int primitive
// Wrapper class cung cấp mốt số methods hữu ích
byteValue(), shortValue(), intValue(), longValue(), floatValue(), doubleValue(), charValue()
VD: Double d = Double.valueOf(314.67);
system.out.println(d.intByte()); // 58 (wrap: 314-256 = 58)
system.out.println(d.intValue()); // 314

//Strings
+ String không phải là primitive data type

9. Text Blocks
- Khi bắt đầu """ mở đầu thì theo sau đó sẽ là một dòng mới

10. Variables
 _ có 3 loại variables
 + local variables
 + instance variables
  + class variables
* Khi sử dụng local variables thì phải khởi tạo trước khi sử dụng, nếu không sẽ bị lỗi biên dịch
còn instance variables và class variables gán giá trị mặc định nếu không được khởi tạo
// final variable(còn gọi là constant)
* final có thể áp dụng cho reference type
final int[] MY_NUMBERS = new int[5];
* reference không thể sửa đổi, nhưng giá trị của mảng có thể thay đổi
MY_NUMBERS[2] = 10; // hợp lệ
MY_NUMBERS = null; // không hợp lệ
- Variable scope
+ local variables: chỉ có thể truy cập trong phương thức, khối lệnh hoặc constructor nơi nó được khai báo
+ Method parameters: chỉ có thể truy cập trong phương thức nơi nó được khai báo
+ Instane variables: trong phạm vi từ khi được định nghĩa tới khi object được thu hồi bởi Grabage Collector
+ Class variables: trong phạm vi từ khi được định nghĩa tới khi chương trình kết thúc
11. Local Variable Type Inference
- Local variable type inference là một tính năng mới trong Java 10, cho phép bạn khai báo biến mà không cần chỉ định kiểu dữ liệu
- Sử dụng từ khóa var để khai báo biến, ví dụ: var x = 10; // x sẽ được compiler suy luận là kiểu int
* bạn không thể gán giá trị null cho biến var, vì compiler không thể suy luận kiểu dữ liệu
VD: var x = null; // Does not compile
* var không phải là reserve keyword( từ khoá dự trữ) trong Java
public class Var {} // OK
var var = 10; // OK
Var var = new Var(); // OK, nhưng bad practice
* Các local variable mới sử dụng được tính năng suy luận kiểu dữ liệu
public int sum(var a, var b) {
    int result = a + b;
    return result;
} // điều này không hoạt động vì a và b là các method parameters không phải là local variable
* Trường hợp sử dụng trong thực tế
//old way
SomeClassWithVeryLongName myInstance = new SomeClassWithVeryLongName();
//new way
var myInstance = new SomeClassWithVeryLongName();
12. Garbage Collector
- Sử dụng Garbage Collector để giải phóng bộ nhớ trên heap
- Bạn có thể gợi ý java dọn nhưng ko có quyền ép buộc bằng lệnh sau:
System.gc(); // gợi ý cho Garbage Collector dọn rác
* Eligibility for Garbage Collection ( Đủ điều kiện để Garbage Collector dọn rác)
+ Object được coi là eligible khi chương trình không còn có thể tiếp cận(reachable) nó nữa
1. Object không còn được tham chiếu bởi bất kỳ biến nào
2. Tất cả reference của object đã ra bên ngoài phạm vi (scope)

// Review Questions
1. ADE
2. C
3. AE
4. AB
5. ABCDF
6. E
7. ABCE
8. BDEFG
9. ABC
10. ABDEF
11. C
12. AC
13. ///
14. ABDE
15. CF
16. BDF
17. ADG
18. ABDF